# -*- coding: utf-8 -*-
"""Gerador de Roteiros para V√≠deos do YouTube - Imers√£o IA Alura + Google Gemini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12_CLlcfOhMOL5LOREqSFPFBXFrWRka1C
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Buscador de Not√≠cias --- #
##########################################
def agente_buscador(topico, data_de_hoje):
    buscador = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        description="Agente que busca informa√ß√µes no Google",
        tools=[google_search],
        instruction="""
        Voc√™ √© um assistente de pesquisa. Seu objetivo √© usar a ferramenta do Google (google_search) para buscar
        as not√≠cias mais atuais sobre conte√∫dos de grande impacto no t√≥pico especificado.
        Priorize um m√°ximo de 5 conte√∫dos, cuja relev√¢ncia ser√° medida pela quantidade de not√≠cias e
        pelo entusiasmo que despertam. Se um item espec√≠fico gerar poucas not√≠cias ou n√£o demonstrar um forte
        interesse p√∫blico/midi√°tico, ele provavelmente n√£o √© relevante o suficiente e deve ser trocado por um
        que tenha maior destaque. O conte√∫do pesquisado deve obrigat√≥riamente respeitar as Pol√≠ticas e diretrizes da comunidade do YouTube,
        caso contr√°rio um aviso dever√° ser emitido. √â fundamental que os conte√∫dos sejam recentes, ocorridos dentro
        do √∫ltimo m√™s a contar da data de hoje.
        """
    )
    entrada_do_agente_buscador = f"T√≥pico: {topico}\nData de hoje: {data_de_hoje}"
    conteudos= call_agent(buscador, entrada_do_agente_buscador)
    return conteudos

#########################################################
# --- Agente 2: Planejador de roteiros para YouTube --- #
#########################################################
def agente_planejador(topico, conteudos_buscados):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        description="Agente que planeja roteiros para v√≠deos do YouTube",
        tools=[google_search],
        # Inserir as instru√ß√µes do Agente Planejador #################################################
        instruction="""
        Assumindo o papel de planejador de conte√∫do com expertise em YouTube, minha tarefa √©,
        a partir de uma lista fornecida de conte√∫dos relevantes que foram pesquisados, usar a ferramenta do
        Google (google_search). Para cada item da lista, pesquisarei para determinar os pontos cruciais a serem
        cobertos em um roteiro e buscarei informa√ß√µes adicionais para aprofundamento.
        Ap√≥s essa an√°lise, selecionarei o tema de maior relev√¢ncia encontrado atrav√©s das pesquisas e retornarei:
        o tema selecionado, seus pontos-chave e uma estrutura de roteiro contendo os assuntos a serem abordados.
        """
    )

    entrada_do_agente_planejador = f"T√≥pico:{topico}\nConte√∫dos buscados: {conteudos_buscados}"
    # Executa o agente
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

######################################################
# --- Agente 3: Redator de roteiros para YouTube --- #
######################################################
def agente_redator(topico, plano_de_post):
    redator = Agent(
        name="agente_redator",
        model="gemini-2.5-flash-preview-04-17",
        description="Agente redator de roteiros para v√≠deos do YouTube",
        instruction="""
        Assumindo a persona de um Redator Criativo Especialista em roteiros para YouTube, meu objetivo √© transformar o tema
        e os pontos-chave de um plano de conte√∫do em um rascunho de roteiro de v√≠deo. O roteiro final dever√° ser
        envolvente, educativo, de f√°cil compreens√£o, estruturado em t√≥picos e com dura√ß√£o m√≠nima de 10 minutos.
        Complementando o roteiro, fornecerei op√ß√µes de t√≠tulos e conceitos de thumbnails (capas) que sejam ambos
        impactantes e SEO-friendly, bem como uma descri√ß√£o de v√≠deo com foco em SEO.
            """
    )
    entrada_do_agente_redator = f"T√≥pico: {topico}\nPlano de post: {plano_de_post}"
    # Executa o agente
    rascunho = call_agent(redator, entrada_do_agente_redator)
    return rascunho

##########################################
# --- Agente 4: Revisor de Qualidade --- #
##########################################
def agente_revisor(topico, rascunho_gerado):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.5-flash-preview-04-17",
        description="Agente revisor de roteiros para v√≠deos do YouTube.",
        instruction="""
            Voc√™ atuar√° como um Editor e Revisor especializado em roteiros para YouTube, com a responsabilidade
            de refinar conte√∫dos para o p√∫blico que tenha interesse no t√≥pico pesquisado, mantendo um tom apropriado.
            Receber√° um rascunho de roteiro para revisar, verificando a clareza da mensagem, a concis√£o, a
            corre√ß√£o (gramatical, factual, etc.) e a ader√™ncia ao tom desejado. Ap√≥s a avalia√ß√£o: se o rascunho estiver excelente,
            responda somente com 'üëç Show de bola! O roteiro ficou √≥timo e est√° pronto para ser usado.'. Caso contr√°rio,
            detalhe os problemas identificados e proponha as melhorias necess√°rias.
            """
    )
    entrada_do_agente_revisor = f"T√≥pico: {topico}\nRascunho: {rascunho_gerado}"
    # Executa o agente
    texto_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return texto_revisado

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üöÄ Iniciando o Gerador de Roteiros para v√≠deos do YouTube üöÄ")

# --- Obter o T√≥pico do Usu√°rio ---
tema = input("\n ‚ñ∂Ô∏è Por favor, digite o tema do seu v√≠deo para o YouTube: ")

# Inserir l√≥gica do sistema de agentes ################################################
if not tema:
  print("\n ‚ö†Ô∏è Opa, foi mal, mas voc√™ esqueceu de digitar o tema do seu v√≠deo!ü§∑‚Äç‚ôÇÔ∏è")
else:
  print(f"\n üé¨ Ok, hora de gerar um ROTEIRO sobre {tema}. \n\n ‚åõ Processando, aguarde um instante...")

  conteudos_buscados = agente_buscador(tema, data_de_hoje)
  print("\n ‚åõ Aguarde mais um pouquinho... \n")
  # display(to_markdown(conteudos_buscados))
  # print("-----------------------------------------------------------")

  plano_de_post = agente_planejador(tema, conteudos_buscados)
  print("üòä J√° estou finalizando, tenha paci√™ncia! \n")
  # display(to_markdown(plano_de_post))
  print("-----------------------------------------------------------")

  rascunho_de_post = agente_redator(tema, plano_de_post)
  print("\n --- AQUI EST√Å O SEU ROTEIRO ---\n")
  display(to_markdown(rascunho_de_post))
  print("-----------------------------------------------------------")

  post_final = agente_revisor(tema, rascunho_de_post)
  print("\n --- Revis√£o do ROTEIRO ---\n")
  display(to_markdown(post_final))
  print("-----------------------------------------------------------")